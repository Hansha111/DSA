# Array

Collection of similar kind of data , in a continuous allocation.
instead of creating multiple variables , create an array.
In C and C++ , we have pointers ,so definitely elements will be stored in continuous memory allocations.
In Java , the elements are stored at random memory allocations.

```
datatype [ ] array_name;
```

**Primitive & Non-Primitive**

Primitive data-types can't be splited or divided . ex- int , float , char
Non-primitive data-types can be divided. ex- string , all the objects created by user

```
class Node{
	int data;
	Node next;
}
```


all the objects , will be stored in heap memory. all the references will be stored in stack memory .
Stack memory ,having less space compared to heap.

---



instead of creating multiple variables , create an array.
if we create , multiple variables, to get the data , simply we can print the variable.
when it comes to array ,if we want to print the data we can print using index values.
 and by default , index values will start from zero .


### Declaration & Initialization of array

```
class Main{
	public static void main(String[] args){
		int[] arr = {1,2,3,4,5};
		}
}
```



### 🔹 Accessing Elements:
```
int myArray = new int[5]; // Array of 5 integers, all default to 0
int[] myArray = {10, 20, 30, 40, 50};

System.out.println(myArray[0]); // prints 10
myArray[1] = 99; // change second element

```


### 🔹 Type of printing formats(3 ways):

```
for (int i = 0; i < myArray.length; i++) {
	System.out.println(myArray[i]); 
}  

// Enhanced for loop 
for (int num : myArray) {
	System.out.println(num); 
}


int arr[] ={1,2,3,4,5};
System.out.print(Arrays.toString(arr));

//toString() is an in-built method to print array.
//toString() can accept only one argument and that too array
```

in for-each loop, we don't need index values

to get the length of the array , we have a method called 
```
array_name.length();

string_name.length; //for strings
```



# 🐍 **snake_case** vs 🐫 **camelCase**
### 💥 Quick Compare:

| Style      | Looks Like        | Common In                                    |
| ---------- | ----------------- | -------------------------------------------- |
| camelCase  | `userLoginTime`   | Java (for production level code), JavaScript |
| snake_case | `user_login_time` | Python, SQL                                  |

For java,

```
//camelCase
void additionOfTwoNumbers{
	//code
}
```


### Declaring the size of array and initializing the values later:

Array having fixed size , if we declare an arraySize , it can't be changed.

```
int arr = new int[5]; // Array of 5 integers, all default to 0

```

before '=' array ref was created.
With the help of 'new' keyword , actual obj will be created in the heap memory , for the particular datatype and size.

if it's a String , default value will be null.
null is a literal .


whenever , we are trying to assign or trying to get nth value of array , we will get an Exception called 'Array Out Of Bond' .

Example:
Finding the Highest valued element and the second Highest valued element in an array.
```
int[] arr={1,2,3,4,4};
        int secondHighest=arr[0];
        int Highest=arr[0];

        for (int i=0 ; i<arr.length ; i++){
            if(arr[i]>Highest){
                secondHighest=Highest;
                Highest=arr[i];
            } else if(arr[i]>secondHighest && arr[i]<Highest){
                secondHighest=arr[i];
            }
        }

        System.out.println("Highest value : "+Highest);
        System.out.println("Second Highest : "+secondHighest);
```

Exercise:
1. Check whether the array is sorted or not?

```
	int[] arr={1,2,3,6,5};
        Boolean res=true;

        for(int i = 0 ; i<arr.length-1 ; i++){
            if (arr[i]<=arr[i+1]){
                continue;
            }
            else{
                res=false;
            }
        }
        
        if(res){
            System.out.println("Sorted");
        }else{
        System.out.println("Not Sorted");
        }
        
```

2. Check whether the given element is there or not?
```
	int[] arr = {1,2,3,4,5};
        int target = 8;

        Boolean res=false;
        for(int i = 0 ; i<arr.length ; i++){
            if(arr[i]==target){
                res=true;
            }
        }

        if(res){
            System.out.println("Element Present");
        }
        else{
            System.out.println("Element Not Present");
        }
        
```

3. In the given array , we've elements only 1's and 0's . Move all 0's to the right side .

```
//Sorting Method

int[] arr={1,0,1,0,1,0};
int n = arr.length;

 for(int i = 0 ; i<n ; i++){
            for(int j = i ; j < n ; j++){
                if (arr[j]==0){
                     //swapping arr[i] and arr[j]
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                    break;
                }
            }
        }

  
System.out.println(Arrays.toString(arr));



//Method 2 without sorting

	int i = 0;
        int j = n-1;
        
        while(i<j){
            while (arr[i]==0) i++;
            while (arr[j]==1) j--;

            //swapping arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;

        }

        System.out.println(Arrays.toString(arr));
```

