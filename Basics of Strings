# Strings

Strings are classes . Arrays are objects .
Sequence of characters is called Strings .
Strings are immutable . 
All the array objects will be created in heap memory , but strings are created inside heap memory in string poll .
Once a string got created , it will be created permanently or fixed . It means, we can't modify the string . 

```
public class Day10 {

Â  Â  public static void main(String[] args) {
Â  Â  Â  Â  //here the string "Hello" is stored in the string pool and a & b poiint to same location...

Â  Â  Â  Â  String a = "Hello";
Â  Â  Â  Â  String b = "Hello";

Â  Â  Â  Â  System.out.println(a==b);

  
Â  Â  Â  Â  //here we created different objects...

Â  Â  Â  Â  String c = new String("Hello");
Â  Â  Â  Â  String d = new String("Hello");


Â  Â  Â  Â  System.out.println(c==d);
Â  Â  }
}

//OUTPUT
true
false
```

`==` is used to compare address .
equals() is used to compare the data .

in strings , `str.length()` is a method.
while , in array , `arr.length` is a field .

We can't reverse a String directly , coz it's immutable . Thus , we need to convert the String into character Array and then reverse .

```
public class Day10 {
Â  Â  static char[] reverse(char[] arr){
Â  Â  Â  Â  int i = 0;
Â  Â  Â  Â  int j = arr.length -1 ;

Â  Â  Â  Â  while(i<j){
Â  Â  Â  Â  Â  Â  //swap
Â  Â  Â  Â  Â  Â  char temp = arr[i];
Â  Â  Â  Â  Â  Â  arr[i] = arr[j] ;
Â  Â  Â  Â  Â  Â  arr[j] = temp;

Â  Â  Â  Â  Â  Â  i++;
Â  Â  Â  Â  Â  Â  j--;

Â  Â  Â  Â  }
Â  Â  Â  Â  return arr;
Â  Â  }


public static void main(String[] args) {
		String str = "Hello";
	Â  Â  Â  Â  char[] arr = str.toCharArray();
	
	Â  Â  Â  Â  String res = new String(reverse(arr));
	Â  Â  Â  Â  System.out.println(res);
	
	Â  Â  }
	}

OUTPUT:
olleH
```


***==Example== : Subset of Array

For a given array, we've to print possible arrays, it should be in a sequence , but not continuous, is called subset .

In an array , If we've n number of elements , we'll get $$ 2^n $$
ex : `array = [1,2,3]`

# ðŸŽ­Backtracking

Example of recursion,
In recursion , we've only two possibilities either if or else .
In backtracking , we've multiple possibilities , we've to check all the possibilities.
Most of the problems , whenever we reach base case , we've to print all the base case elements .
Remove last element in every recursive call , then the backtracking will be completes , otherwise it's just a recursion.
