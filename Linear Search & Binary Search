# Linear Search

	--> to search the element in an array in a linear way .
	-->whenever array length is smaller , we'll use linear search .
	--> Time Complexity : O(n)

******Code & Snippet ***
Code is the entire class and functions etc. 
Snippet is the part of that code .


```
public class Day13 {

    public static void main(String[] args){

        int[] arr = {5,8,11,14,16};

        int target = 14;

        int res = -1;

        for(int i = 0 ;i<arr.length ; i++){

            if(arr[i]==target){

                res=i;

            }

        }

        System.out.println(res);

    }

}
```


# Binary Search

	--> To reduce Time Complexity while searching , we need to use binary search . 
	--> In Binary Search , the Time Complexity is O(log n)
	--> To perform Binary Search , the array should be sorted.


******Steps:******
1. Initialize l pointer at 0 & r pointer at n-1 index.
2. Run the Loop from l to r , break the loop when l and r crosses each other .
3. Find the middle value , by
	`mid = (l+r)/2`
4. Compare mid element to the target , if it's equal return mid . 
5. if mid value is smaller to the target , it means definitely we won't the element in the left portion of the array . so right pointer will remain same , we just need to move left pointer to `l = mid + 1`
6. If mid value is greater than target , so we can't get the element in right portion , so left pointer will same , we need to move right pointer to `r = mid - 1`


```
public class Day13 {

    public static int binarySearch(int[] arr , int target){

        int l = 0;
        int r = arr.length - 1;

        while(l<r){
            int mid = (l+r)/2;

            if(arr[mid] == target) return mid;

            else if(arr[mid]<target) l=mid+1;

            else r=mid-1;

        }
        return arr.length;
    }

    public static void main(String[] args){

        int[] arr = {5,8,11,14,16};
        int target = 14;

        System.out.println(binarySearch(arr , target));

    }
}
```


**Q. In a given Array , Find the Target element index using Binary Search.**

Steps:
1. initialize l and r at 0 and n-1 
2. Run the loop from l to r , until l < r
3. we've to find , which half is sorted . For that if `arr[mid] < arr[l] ` it means right half is sorted and if target lies in between `arr[l] `and `arr[mid]` , it means element is present in left half , l will remain same , `r = mid - 1` , else , element present in right half --> `l = mid + 1` and r will remain same .
4. if `arr[mid] > arr[l]` means left half is sorted and if target lies in between `arr[r]` & `arr[mid]` it means element lies in right half , `l = mid + 1 ` , r will remain same , else l will be same and `r = mid - 1 ` .

```
class Solution {

    public int search(int[] nums, int target) {

        int l = 0;

        int r = nums.length - 1 ;

        while(l<=r){

            int mid = (l+r)/2;

            if(target==nums[mid]){

                return mid;

            }

            else if(nums[mid] >= nums[l]){

                if(target>=nums[l] && target<nums[mid]){

                    r = mid -1;

                }else{

                    l=mid+1;

                }

            }

            else {

                if(target <= nums[r] && target > nums[mid]){

                    l=mid+1;

                }

                else{

                    r=mid-1;

                }

            }

        }

        return -1;

    }

}
```


### Lower Bound & Upper Bound

```
public class Day13 {

  

    public static int lowerBound(int[] arr , int target){

        int l = 0;

        int r = arr.length ;

        while(l<r){

            int mid = (l+r)/2;

            if(arr[mid]<target) l=mid+1;

            else r=mid;

        }

        if(l<arr.length){

            return arr[l];

        }

        else{

            return -1;

        }

    }

    public static int upperBound(int[] arr , int target){

        int l = 0;

        int r = arr.length ;

        while(l<r){

            int mid = (l+r)/2;

            if(arr[mid]<=target) l=mid+1;

            else r=mid;

        }

        if(l<arr.length){

            return arr[l];

        } else{

            return -1;

        }

  

    }

  

    //LB--> element >= target

    //UB--> element > target

  

    public static void main(String[] args){

        int[] arr = {5,8,11,14,16};

        int target = 14;

        System.out.println(lowerBound(arr, target));

        System.out.println(upperBound(arr, target));

    }

}
```



---

**Q. First occurrence and Last occurrence of target element in an Array.**

```
public class Day13 {
    public static int lowerBound(int[] arr , int target){

        int l = 0;
        int r = arr.length ;

        while(l<r){
            int mid = (l+r)/2;
            if(arr[mid]<target) l=mid+1;
            else r=mid;
        }

        if(l<arr.length){
            return l;
        }

        else{
            return arr.length;
        }
    }

    public static int upperBound(int[] arr , int target){
        int l = 0;
        int r = arr.length ;

        while(l<r){
            int mid = (l+r)/2
            if(arr[mid]<=target) l=mid+1;
            else r=mid;

        }

        if(l<arr.length){
            return l-1;
        } else{
            return arr.length;
        }

    }

    //LB--> element >= target

    //UB--> element > target

    public static void main(String[] args){

        int[] arr = {5,8,8,8,8,8,11,14,14,14,16,16};
        int target = 14;

        System.out.println(lowerBound(arr, target));
        System.out.println(upperBound(arr, target));

    }
}
```


**Q. Finding the minimum value in a rotated array using binary search**


```
public class Day14 {
    public static int minVal(int[] arr){
        int min_val = Integer.MAX_VALUE;
        int l = 0;
        int r= arr.length-1;

        while(l<=r){
            int mid = (l+r)/2;
            if(arr[mid]<=arr[l]){
                //right portion is sorted
                min_val=Math.min(min_val,arr[mid]);
                r=mid-1;
            }
            else if (arr[mid]>arr[l]){
                //left is sorted
                min_val=Math.min(min_val,arr[l]);
                l=mid+1;
            }
        }
        return min_val;
    }

    public static void main(String[] args) {
        int[] arr={6,7,8,9,10,11,1,2,3,4,5};
        System.out.println(minVal(arr));
    }
}
```


**Another way:**
```
public class Day14 {

    public static int minVal(int[] arr){
        int l = 0;
        int r= arr.length-1;

        while(l<r){
            int mid = (l+r)/2;
            
            if(arr[mid]>arr[r]){
                l = mid+1;
            }
            else{
                r=mid;
            }
        }
        return arr[l];
    }

    public static void main(String[] args) {
        int[] arr={6,7,8,9,10,11,1,2,3,4,5};
        System.out.println(minVal(arr));
    }
}
```
